# strategies/range.py
import asyncio
from strategies.range_config import RangeConfig
from decimal import Decimal, InvalidOperation
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from utils import get_price, place_market_order_safe, has_enough_balance, safe_add_strategy
from state import make_job_key, add_job, get_jobs, remove_job
from menus import get_main_menu
from decorators import resilient_strategy
from constants import MIN_ORDER_USD
import logging

logger = logging.getLogger(__name__)


@resilient_strategy
async def range_job(context):
    job = context.job
    data = job.data or {}
    symbol = data.get("symbol")
    try:
        amount = Decimal(str(data.get("amount", 0)))
    except (InvalidOperation, TypeError):
        amount = Decimal("0")

    try:
        low = float(data.get("low", 0))
        high = float(data.get("high", 0))
    except Exception:
        low, high = 0.0, 0.0

    chat_id = job.chat_id
    price = await asyncio.to_thread(get_price, symbol)

    if price is None:
        msg = f"‚ùå –ù–µ—Ç —Ü–µ–Ω—ã –¥–ª—è {symbol}"
    else:
        try:
            order_value = amount * Decimal(str(price))
        except Exception:
            order_value = Decimal("0")

        if order_value < MIN_ORDER_USD:
            msg = f"‚ö†Ô∏è Range: –ø—Ä–æ–ø—É—Å–∫ –æ—Ä–¥–µ—Ä–∞ {symbol}: {order_value:.2f} USDT < –º–∏–Ω–∏–º—É–º {MIN_ORDER_USD} USDT"
            logger.info(msg)
        elif price <= low:
            side = "buy"
            ok, reason = await asyncio.to_thread(has_enough_balance, symbol, side, float(amount))
            if not ok:
                msg = f"‚ùå Range –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {reason}"
                try:
                    job.schedule_removal()
                    remove_job(context.application.user_data.get(chat_id, {}), job.name)
                except Exception:
                    logger.warning("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ range_job.")
            else:
                await place_market_order_safe(symbol, side, float(amount))
                msg = f"üü¢ BUY {symbol} @ {price:.2f} (<= {low})"
        elif price >= high:
            side = "sell"
            ok, reason = await asyncio.to_thread(has_enough_balance, symbol, side, float(amount))
            if not ok:
                msg = f"‚ùå Range –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {reason}"
                try:
                    job.schedule_removal()
                    remove_job(context.application.user_data.get(chat_id, {}), job.name)
                except Exception:
                    logger.warning("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ range_job.")
            else:
                await place_market_order_safe(symbol, side, float(amount))
                msg = f"üî¥ SELL {symbol} @ {price:.2f} (>= {high})"
        else:
            msg = f"üìä {symbol}: {price:.2f} (–¥–∏–∞–ø–∞–∑–æ–Ω {low}-{high})"

    keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("üõë –°—Ç–æ–ø", callback_data=f"STOP:{job.name}")]])
    try:
        await context.bot.send_message(chat_id, msg, reply_markup=keyboard)
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ range_job: {e}")

    # === –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ ===
    from load_manager import adaptive_delay
    job.interval = await adaptive_delay(job.interval)


async def start_range_strategy(update, context, symbol, amount, low, high, interval):
    """–ó–∞–ø—É—Å–∫ Range —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º (–≤ –º–∏–Ω—É—Ç–∞—Ö)."""

    from load_manager import register_strategy
    chat_id = update.effective_chat.id

    # === 1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ ===
    try:
        cfg = RangeConfig(symbol=symbol, amount=amount, low=low, high=high, interval=interval)
    except Exception as e:
        await update.message.reply_text(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {e}", reply_markup=get_main_menu())
        return False

    # === 2Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª—é—á–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ ===
    job_key = make_job_key("range", symbol, amount=amount, low=low, high=high, interval=interval)

    # === 3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ ===
    if job_key in get_jobs(context.user_data):
        await update.message.reply_text(f"‚ö†Ô∏è –£–∂–µ –∑–∞–ø—É—â–µ–Ω–æ: {job_key}", reply_markup=get_main_menu())
        return False

    # === 4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π ===
    if not register_strategy(chat_id, job_key):
        await update.message.reply_text("‚ö†Ô∏è –õ–∏–º–∏—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –¥–æ—Å—Ç–∏–≥–Ω—É—Ç.", reply_markup=get_main_menu())
        return False

    # === 5Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ ===
    ok, reason = await asyncio.to_thread(has_enough_balance, symbol, "buy", amount)
    if not ok:
        await update.message.reply_text(f"‚ùå –ó–∞–ø—É—Å–∫ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω: {reason}", reply_markup=get_main_menu())
        return False

    # === 6Ô∏è‚É£ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ ===
    job = context.job_queue.run_repeating(
        range_job,
        interval * 60,
        chat_id=chat_id,
        name=job_key,
        data={"symbol": symbol, "amount": amount, "low": low, "high": high}
    )
    add_job(context.user_data, job_key, job)

    # === 7Ô∏è‚É£ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ state ===
    safe_add_strategy(update, "range", symbol, {
        "amount": amount,
        "low": low,
        "high": high,
        "interval": interval,
    })

    # === 8Ô∏è‚É£ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ ===
    await update.message.reply_text(
        f"üöÄ Range-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω –¥–ª—è {symbol}\n"
        f"–î–∏–∞–ø–∞–∑–æ–Ω {low}-{high} / –û–±—ä—ë–º {amount}\n–ò–Ω—Ç–µ—Ä–≤–∞–ª: {interval} –º–∏–Ω.",
        reply_markup=get_main_menu()
    )
    logger.info(f"‚úÖ Range-—Å—Ç—Ä–∞—Ç–µ–≥–∏—è {job_key} –∑–∞–ø—É—â–µ–Ω–∞ –¥–ª—è {chat_id}")
    return True
