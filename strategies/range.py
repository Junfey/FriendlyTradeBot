#strategies.range.py
import asyncio
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from utils import get_price, place_market_order_safe, has_enough_balance, safe_add_strategy
from state import make_job_key, add_job, get_jobs, remove_job
from menus import get_main_menu
from decorators import resilient_strategy


@resilient_strategy
async def range_job(context):
    job = context.job
    data = job.data or {}
    symbol = data.get("symbol")
    amount = float(data.get("amount", 0))
    low = float(data.get("low", 0))
    high = float(data.get("high", 0))
    chat_id = job.chat_id

    price = await asyncio.to_thread(get_price, symbol)
    if price is None:
        msg = f"‚ùå –ù–µ—Ç —Ü–µ–Ω—ã –¥–ª—è {symbol}"
    elif price <= low:
        side = "buy"
        ok, reason = await asyncio.to_thread(has_enough_balance, symbol, side, amount)
        if not ok:
            msg = f"‚ùå Range –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {reason}"
            job.schedule_removal()
            remove_job(context.application.user_data.get(chat_id, {}), job.name)
        else:
            await place_market_order_safe(symbol, side, amount)
            msg = f"üü¢ BUY {symbol} @ {price:.2f} (<= {low})"
    elif price >= high:
        side = "sell"
        ok, reason = await asyncio.to_thread(has_enough_balance, symbol, side, amount)
        if not ok:
            msg = f"‚ùå Range –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {reason}"
            job.schedule_removal()
            remove_job(context.application.user_data.get(chat_id, {}), job.name)
        else:
            await place_market_order_safe(symbol, side, amount)
            msg = f"üî¥ SELL {symbol} @ {price:.2f} (>= {high})"
    else:
        msg = f"üìä {symbol}: {price:.2f} (–¥–∏–∞–ø–∞–∑–æ–Ω {low}-{high})"

    keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("üõë –°—Ç–æ–ø", callback_data=f"STOP:{job.name}")]])
    await context.bot.send_message(chat_id, msg, reply_markup=keyboard)




async def start_range_strategy(update, context, symbol, amount, low, high, interval):
    """–ó–∞–ø—É—Å–∫ Range —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º (–≤ –º–∏–Ω—É—Ç–∞—Ö)."""
    job_key = make_job_key("range", symbol, amount=amount, low=low, high=high, interval=interval)
    if job_key in get_jobs(context.user_data):
        await update.message.reply_text(f"‚ö†Ô∏è –£–∂–µ –∑–∞–ø—É—â–µ–Ω–æ: {job_key}", reply_markup=get_main_menu())
        return

    ok, reason = await asyncio.to_thread(has_enough_balance, symbol, "buy", amount)
    if not ok:
        await update.message.reply_text(f"‚ùå –ó–∞–ø—É—Å–∫ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω: {reason}", reply_markup=get_main_menu())
        return

    job = context.job_queue.run_repeating(
        range_job, interval * 60,
        chat_id=update.effective_chat.id,
        name=job_key, data={"symbol": symbol, "amount": amount, "low": low, "high": high}
    )
    add_job(context.user_data, job_key, job)


    # ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é –≤–µ—Ä—Å–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç chat_id
    safe_add_strategy(update, context, "range",{
        "symbol": symbol,
        "amount": amount,
        "low": low,
        "high": high,
        "interval": interval
    })


    await update.message.reply_text(
        f"üöÄ Range-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω –¥–ª—è {symbol}\n"
        f"–î–∏–∞–ø–∞–∑–æ–Ω {low}-{high} / –û–±—ä—ë–º {amount}\n–ò–Ω—Ç–µ—Ä–≤–∞–ª: {interval} –º–∏–Ω.",
        reply_markup=get_main_menu()
    )

