# restore_strategies.py
import asyncio
import sys
import os
from datetime import datetime
from types import SimpleNamespace
from state_manager import load_strategies
from utils import get_exchange

LOG_DIR = "logs"
os.makedirs(LOG_DIR, exist_ok=True)
LOG_FILE = os.path.join(LOG_DIR, "restore.log")

sys.path.append(os.path.dirname(__file__))

def log_restore(message: str):
    ts = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    line = f"[{ts}] {message}"
    print(line)
    try:
        with open(LOG_FILE, "a", encoding="utf-8") as f:
            f.write(line + "\n")
    except Exception as e:
        print(f"[ERROR writing restore log]: {e}")

async def restore_strategies(app=None):
    log_restore("üîÅ –ó–∞–ø—É—Å–∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π...")

    try:
        data = load_strategies()
    except Exception as e:
        log_restore(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: {e}")
        return

    if not data:
        log_restore("‚ö†Ô∏è –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è.")
        return

    exchange = None
    for attempt in range(1, 6):
        try:
            exchange = get_exchange()
            log_restore(f"‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∏—Ä–∂–µ–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ (–ø–æ–ø—ã—Ç–∫–∞ {attempt}).")
            break
        except Exception as e:
            wait = min(60, 2 ** attempt * 2)
            log_restore(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (–ø–æ–ø—ã—Ç–∫–∞ {attempt}/5): {e}. –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {wait}s...")
            await asyncio.sleep(wait)
    if exchange is None:
        log_restore("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∏—Ä–∂–µ. –û—Ç–º–µ–Ω–∞.")
        return

    total = sum(len(v) for v in data.values() if isinstance(v, list))
    restored_count = 0
    log_restore(f"üîÅ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π ({len(data)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –≤—Å–µ–≥–æ {total})...")

    app.bot_data.setdefault("active_strategies", {})

    for chat_id, strategies in data.items():
        try:
            chat_id = int(chat_id)
        except Exception:
            continue

        app.bot_data["active_strategies"].setdefault(chat_id, [])

        async def fake_reply_text(*args, **kwargs):
            msg = ' '.join(str(a) for a in args)
            print(f"[restore_info] {msg}")

        fake_update = SimpleNamespace(
            message=SimpleNamespace(reply_text=fake_reply_text),
            effective_chat=SimpleNamespace(id=chat_id)
        )
        fake_context = SimpleNamespace(
            bot=None,
            application=app,
            job_queue=getattr(app, "job_queue", None),
            user_data={"chat_id": chat_id}
        )

        for strat in strategies:
            strategy = strat.get("type")
            symbol = strat.get("symbol")
            params = strat.get("params", {})

            if not strategy or not symbol:
                continue

                # –ù–ï –¥–æ–±–∞–≤–ª—è–µ–º –≤ bot_data –∑–∞—Ä–∞–Ω–µ–µ ‚Äî —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
                try:
                    st = str(strategy).lower()
                    started = False

                    if st in ("range", "rng", "r"):
                        from strategies.range import start_range_strategy
                        started = await start_range_strategy(
                            fake_update,
                            fake_context,
                            symbol,
                            params.get("amount"),
                            params.get("low"),
                            params.get("high"),
                            params.get("interval"),
                        )

                    elif st == "dca":
                        from strategies.dca import start_dca_strategy
                        started = await start_dca_strategy(
                            fake_update,
                            fake_context,
                            symbol,
                            params.get("amount"),
                            params.get("interval"),
                        )

                    elif st in ("percent", "pct", "percentual"):
                        from strategies.percent import start_percent_strategy
                        started = await start_percent_strategy(
                            fake_update,
                            fake_context,
                            symbol,
                            params.get("amount"),
                            params.get("step"),
                            params.get("interval"),
                        )

                    else:
                        log_restore(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ '{strategy}' ({symbol}) ‚Äî –ø—Ä–æ–ø—É—Å–∫.")
                        continue

                    if started:
                        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —É—Å–ø–µ—à–Ω—ã–µ —Å—Ç–∞—Ä—Ç—ã –≤ bot_data –∏ —Å—á–∏—Ç–∞–µ–º –≤ restored_count
                        app.bot_data.setdefault("active_strategies", {})
                        app.bot_data["active_strategies"].setdefault(chat_id_int, [])
                        app.bot_data["active_strategies"][chat_id_int].append({
                            "type": strategy,
                            "symbol": symbol,
                            "params": params,
                            "timestamp": datetime.now().isoformat()
                        })
                        restored_count += 1
                        log_restore(f"‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ {strategy.upper()} –¥–ª—è {symbol} (user {chat_id})")
                    else:
                        log_restore(
                            f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫ –∑–∞–ø—É—Å–∫–∞ {strategy} –¥–ª—è {symbol} (user {chat_id}) ‚Äî —Å—Ç–∞—Ä—Ç –æ—Ç–º–µ–Ω—ë–Ω/–Ω–µ—É—Å–ø–µ—à–µ–Ω.")

                except Exception as e:
                    log_restore(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ {strategy} ({symbol}): {e}")
                    continue

        # --- –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ ---
        log_restore(f"üèÅ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –£—Å–ø–µ—à–Ω–æ: {restored_count}/{total}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, –µ—Å–ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ
        bot = app.bot
        for chat_id, strategies in app.bot_data.get("active_strategies", {}).items():
            if not strategies:
                continue
            msg = "‚úÖ –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã\nüïí –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫: " + datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            msg += "\n\nüìã –ê–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:\n" + "\n".join(
                f"‚Ä¢ {s['type'].upper()} ‚Äî {s['symbol']}" for s in strategies)
            try:
                await bot.send_message(chat_id=chat_id, text=msg)
                log_restore(f"üì® –°–æ–æ–±—â–µ–Ω–∏–µ –æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}")
            except Exception as e:
                log_restore(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ {chat_id}: {e}")

    # --- –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ---
    if restored_count > 0 and app:
        bot = app.bot
        for chat_id, strats in app.bot_data["active_strategies"].items():
            if not strats:
                continue
            msg = "‚úÖ –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã\nüïí –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫: " + datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            msg += "\n\nüìã –ê–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:\n" + "\n".join(
                f"‚Ä¢ {s['type'].upper()} ‚Äî {s['symbol']}" for s in strats
            )
            try:
                await bot.send_message(chat_id=chat_id, text=msg)
                log_restore(f"üì® –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}")
            except Exception as e:
                log_restore(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {chat_id}: {e}")

if __name__ == "__main__":
    asyncio.run(restore_strategies())
