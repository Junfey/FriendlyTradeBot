#restore_strategies.py
import asyncio
import sys
import os
from datetime import datetime
from state_manager import load_strategies
from utils import get_exchange  # ‚úÖ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–æ–≤ ===
LOG_DIR = "logs"
LOG_FILE = os.path.join(LOG_DIR, "restore.log")
os.makedirs(LOG_DIR, exist_ok=True)

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –ø–∞–ø–∫—É –≤ sys.path –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
sys.path.append(os.path.dirname(__file__))


def log_restore(message: str):
    """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ restore.log –∏ –≤—ã–≤–æ–¥–∏—Ç –≤ –∫–æ–Ω—Å–æ–ª—å."""
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    line = f"[{timestamp}] {message}"
    print(line)
    try:
        with open(LOG_FILE, "a", encoding="utf-8") as f:
            f.write(line + "\n")
    except Exception as e:
        print(f"[–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –ª–æ–≥–∞]: {e}")


async def restore_strategies(app):
    """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ."""
    try:
        data = load_strategies()
    except Exception as e:
        log_restore(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: {e}")
        return

    if not data:
        log_restore("‚ùå –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è.")
        return

    # –ü—Ä–æ–≤–µ—Ä–∏–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∏—Ä–∂–µ
    try:
        exchange = get_exchange()
        log_restore("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∏—Ä–∂–µ–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")
    except Exception as e:
        log_restore(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∏—Ä–∂–µ –ø–µ—Ä–µ–¥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º: {e}")
        return

    total = sum(len(v) for v in data.values() if isinstance(v, dict))
    restored_count = 0

    log_restore(f"üîÅ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π ({len(data)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –≤—Å–µ–≥–æ {total})...")

    for chat_id, user_strategies in data.items():
        # –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ chat_id –∫ —á–∏—Å–ª—É
        try:
            chat_id_int = int(chat_id)
        except (ValueError, TypeError):
            log_restore(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ chat_id: {chat_id}")
            continue

        if not isinstance(user_strategies, dict):
            log_restore(f"‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–π —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")
            continue

        for key, info in user_strategies.items():
            strategy = info.get("strategy") or info.get("type")
            symbol = info.get("symbol")
            params = info.get("params", {})

            if not strategy or not symbol:
                log_restore(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {info}")
                continue

            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ–∏–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è –≤—ã–∑–æ–≤–∞ start_—Ñ—É–Ω–∫—Ü–∏–π
            fake_update = type("FakeUpdate", (), {
                "message": type("msg", (), {"reply_text": lambda *_: None})(),
                "effective_chat": type("chat", (), {"id": chat_id_int})()
            })()

            fake_context = type("FakeContext", (), {
                "job_queue": app.job_queue,
                "user_data": {"chat_id": chat_id_int}
            })()

            try:
                interval = params.get("interval", 5)
                amount = params.get("amount")

                # === –ó–∞–ø—É—Å–∫ –Ω—É–∂–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ ===
                if strategy == "percent":
                    from strategies.percent import start_percent_strategy
                    await start_percent_strategy(
                        fake_update, fake_context, symbol,
                        amount, params.get("step"), interval
                    )

                elif strategy == "range":
                    from strategies.range import start_range_strategy
                    await start_range_strategy(
                        fake_update, fake_context, symbol,
                        amount, params.get("low"), params.get("high"), interval
                    )

                elif strategy == "dca":
                    from strategies.dca import start_dca_strategy
                    await start_dca_strategy(
                        fake_update, fake_context, symbol,
                        amount, interval
                    )

                restored_count += 1
                log_restore(f"‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ {strategy.upper()} –¥–ª—è {symbol} (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id})")

            except Exception as e:
                log_restore(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ {strategy} –¥–ª—è {symbol} (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id}): {e}")

    log_restore(f"üèÅ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –£—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {restored_count}/{total}.")
