# load_manager.py
import asyncio
import time
import logging
from collections import deque

logger = logging.getLogger(__name__)

# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===
MAX_API_CALLS_PER_MIN = 1100           # –ª–∏–º–∏—Ç Binance API
WARNING_THRESHOLD = 0.85               # –ø—Ä–∏ 85% –Ω–∞—á–Ω—ë–º –∑–∞–º–µ–¥–ª—è—Ç—å
CRITICAL_THRESHOLD = 0.95              # –ø—Ä–∏ 95% ‚Äî –ø–∞—É–∑–∞
ADAPTIVE_INTERVAL_STEP = 1.25          # –º–Ω–æ–∂–∏—Ç–µ–ª—å —É–≤–µ–ª–∏—á–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞

_api_calls_log = deque(maxlen=MAX_API_CALLS_PER_MIN)

def record_api_call():
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—ã–∑–æ–≤ API"""
    _api_calls_log.append(time.time())

def get_api_load() -> float:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â—É—é –Ω–∞–≥—Ä—É–∑–∫—É –Ω–∞ API (0.0‚Äì1.0)"""
    now = time.time()
    one_min_ago = now - 60
    calls = sum(1 for t in _api_calls_log if t >= one_min_ago)
    return calls / MAX_API_CALLS_PER_MIN

async def adaptive_delay(base_interval: float) -> float:
    """–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–≥—Ä—É–∑–∫–∏"""
    load = get_api_load()
    if load >= CRITICAL_THRESHOLD:
        logger.error(f"üî• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ ({load*100:.1f}%), –ø–∞—É–∑–∞ 30 —Å–µ–∫.")
        await asyncio.sleep(30)
        return base_interval * ADAPTIVE_INTERVAL_STEP
    elif load >= WARNING_THRESHOLD:
        new_interval = base_interval * ADAPTIVE_INTERVAL_STEP
        logger.warning(f"‚ö†Ô∏è –í—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ ({load*100:.1f}%), —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ {new_interval:.2f}")
        return new_interval
    return base_interval


_active_strategies = {}

def register_strategy(user_id: int, job_key: str) -> bool:
    user_jobs = _active_strategies.setdefault(user_id, set())
    if len(user_jobs) >= 20:
        logger.warning(f"‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–π (20) —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        return False
    user_jobs.add(job_key)
    return True

def unregister_strategy(user_id: int, job_key: str):
    if user_id in _active_strategies:
        _active_strategies[user_id].discard(job_key)
