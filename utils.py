#utils.py
import logging
import asyncio
import ccxt
import time
from typing import Dict, Any, Tuple, List
from state_manager import load_strategies, save_strategies
from config import EXCHANGE_API_KEY, EXCHANGE_API_SECRET, EXCHANGE_NAME, USE_TESTNET

exchange = None  # –≥–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è


logger = logging.getLogger(__name__)

COMMON_QUOTES = ["USDT", "BTC", "ETH", "BUSD", "USDC", "USD", "EUR"]

# –õ–æ–∫–∏ –ø–æ —Å–∏–º–≤–æ–ª–∞–º (—á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ –Ω–∞ –æ–¥–Ω–æ–π –ø–∞—Ä–µ)
_order_locks: Dict[str, asyncio.Lock] = {}



# utils.py
import logging
import asyncio
import ccxt
import time
from typing import Dict, Any, Tuple, List
from state_manager import load_strategies, save_strategies
from config import EXCHANGE_API_KEY, EXCHANGE_API_SECRET, EXCHANGE_NAME, USE_TESTNET

exchange = None
logger = logging.getLogger(__name__)

COMMON_QUOTES = ["USDT", "BTC", "ETH", "BUSD", "USDC", "USD", "EUR"]
_order_locks: Dict[str, asyncio.Lock] = {}


def get_exchange(force_reconnect: bool = False):
    """
    –°–æ–∑–¥–∞—ë—Ç –∏–ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∏—Ä–∂–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä Binance).
    –ü—Ä–∏ –æ–±—Ä—ã–≤–µ —Å–≤—è–∑–∏ ‚Äî –¥–µ–ª–∞–µ—Ç –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥.
    """
    global exchange

    # ‚úÖ –ù–µ –ø–µ—Ä–µ—Å–æ–∑–¥–∞—ë–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ —É–∂–µ –∂–∏–≤–æ–µ
    if not force_reconnect and exchange and hasattr(exchange, "markets") and exchange.markets:
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ª—ë–≥–∫–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
            exchange.fetch_time()
            return exchange
        except Exception:
            logging.warning("‚ö†Ô∏è –°—Ç–∞—Ä–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –º–µ—Ä—Ç–≤–æ, –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...")

    while True:
        try:
            logging.info("üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∏—Ä–∂–µ...")

            exchange_class = getattr(ccxt, EXCHANGE_NAME)
            exchange = exchange_class({
                "apiKey": EXCHANGE_API_KEY,
                "secret": EXCHANGE_API_SECRET,
                "enableRateLimit": True,
                "options": {
                    "defaultType": "spot",
                    "adjustForTimeDifference": True
                }
            })

            if USE_TESTNET and hasattr(exchange, "set_sandbox_mode"):
                exchange.set_sandbox_mode(True)
                logging.info("üß™ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–µ—Å—Ç–æ–≤–∞—è —Å–µ—Ç—å Binance (Testnet).")

            exchange.check_required_credentials()
            exchange.load_markets()
            exchange.fetch_time()  # –ø—Ä–æ–±–Ω–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ
            logging.info("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∏—Ä–∂–µ.")
            return exchange

        except ccxt.NetworkError as e:
            logging.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {e}. –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ 10 —Å–µ–∫...")
        except ccxt.AuthenticationError:
            logging.error("‚ùå –û—à–∏–±–∫–∞ API-–∫–ª—é—á–µ–π. –ü—Ä–æ–≤–µ—Ä—å config.py.")
            raise
        except Exception as e:
            logging.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")

        time.sleep(10)



async def reconnect_exchange(delay: int = 10):
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∏—Ä–∂–µ.
    –ù–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç event loop –∏ –Ω–µ –º–µ—à–∞–µ—Ç —Ä–∞–±–æ—Ç–µ –¥—Ä—É–≥–∏—Ö –∑–∞–¥–∞—á.
    """
    global exchange
    logging.warning(f"‚ôªÔ∏è –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∏—Ä–∂–µ —á–µ—Ä–µ–∑ {delay} —Å–µ–∫—É–Ω–¥...")
    await asyncio.sleep(delay)  # –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç

    try:
        new_exchange = await asyncio.to_thread(get_exchange, True)  # —Ñ–æ—Ä—Å–∏—Ä—É–µ–º reconnect
        if new_exchange:
            exchange = new_exchange
            logging.info("‚úÖ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ.")
    except Exception as e:
        logging.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")





async def reconnect_exchange(delay: int = 10):
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∏—Ä–∂–µ.
    –ù–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç event loop –∏ –Ω–µ –º–µ—à–∞–µ—Ç —Ä–∞–±–æ—Ç–µ –¥—Ä—É–≥–∏—Ö –∑–∞–¥–∞—á.
    """
    global exchange
    logging.warning(f"‚ôªÔ∏è –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∏—Ä–∂–µ —á–µ—Ä–µ–∑ {delay} —Å–µ–∫—É–Ω–¥...")
    await asyncio.sleep(delay)  # –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç

    try:
        new_exchange = await asyncio.to_thread(get_exchange)  # –≤—ã–ø–æ–ª–Ω—è–µ—Ç –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        if new_exchange:
            exchange = new_exchange
            logging.info("‚úÖ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ.")
    except Exception as e:
        logging.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")


# --- –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ ---
def safe_add_strategy(update_or_user, strategy_type, symbol, params):
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ –¥–æ–±–∞–≤–ª—è–µ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏—é (—á–µ—Ä–µ–∑ state_manager),
    –ø—Ä–æ–≤–µ—Ä—è—è –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ —Å–æ—Ö—Ä–∞–Ω—è—è –≤ –æ–±—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ.
    """
    from state_manager import load_strategies, save_strategies
    import datetime

    try:
        if hasattr(update_or_user, "effective_chat"):
            chat_id = str(update_or_user.effective_chat.id)
        elif isinstance(update_or_user, dict):
            chat_id = str(update_or_user.get("chat_id", "unknown"))
        else:
            chat_id = "unknown"

        all_data = load_strategies()
        if chat_id not in all_data:
            all_data[chat_id] = {}

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        exists = any(
            s.get("symbol") == symbol and s.get("type") == strategy_type
            for s in all_data[chat_id].values()
        )
        if exists:
            logger.warning(f"[safe_add_strategy] ‚ö†Ô∏è –°—Ç—Ä–∞—Ç–µ–≥–∏—è {strategy_type}:{symbol} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ‚Äî –ø—Ä–æ–ø—É—Å–∫.")
            return False

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ID
        strategy_id = f"{strategy_type}_{symbol}_{datetime.datetime.now().strftime('%Y%m%dT%H%M%S%f')}"

        all_data[chat_id][strategy_id] = {
            "type": strategy_type,
            "symbol": symbol,
            "parameters": params,
            "created_at": datetime.datetime.now().isoformat()
        }

        save_strategies(all_data)
        logger.info(f"[safe_add_strategy] ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è {strategy_type}:{symbol} ({strategy_id})")
        return True

    except Exception as e:
        logger.exception(f"[safe_add_strategy] ‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {e}")
        return False







# --- –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏–º–≤–æ–ª–∞ ---
def normalize_symbol(symbol: str) -> str:
    s = symbol.replace(" ", "").replace("-", "").upper()
    if "/" in s:
        return s
    for quote in COMMON_QUOTES:
        if s.endswith(quote):
            base = s[:-len(quote)]
            return f"{base}/{quote}"
    return s


# --- –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ ---
def get_balance() -> Dict[str, float]:
    try:
        bal = exchange.fetch_balance()
        totals = bal.get("total", bal)
        result = {
            asset: float(amt)
            for asset, amt in totals.items()
            if isinstance(amt, (int, float)) and amt > 0
        }
        return result
    except Exception:
        logger.exception("get_balance error")
        raise


# --- –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã ---
def get_price(symbol: str):
    try:
        if symbol not in exchange.symbols:
            logger.warning(f"‚ùå –ü–∞—Ä–∞ {symbol} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")
            return None
        ticker = exchange.fetch_ticker(symbol)
        return ticker.get("last")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ get_price {symbol}: {e}")
        return None


# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞ ---
def _check_min_order(symbol: str, amount: float) -> Tuple[bool, str]:
    market = exchange.markets.get(symbol)
    if not market:
        return False, f"‚ùå –ü–∞—Ä–∞ {symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."

    price = get_price(symbol)
    if not price:
        return False, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É {symbol}"

    cost = amount * price
    min_cost = market["limits"]["cost"]["min"]
    if min_cost and cost < min_cost:
        return False, f"‚ùå –û—Ä–¥–µ—Ä —Å–ª–∏—à–∫–æ–º –º–∞–ª: {cost:.2f} < {min_cost:.2f} USDT"
    return True, ""


# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ ---
def has_enough_balance(symbol: str, side: str, amount: float) -> Tuple[bool, str]:
    try:
        balance = get_balance()
        base, quote = symbol.split("/")
        price = get_price(symbol)

        if not price:
            return False, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É"

        if side == "buy":
            required_quote = price * amount
            available_quote = float(balance.get(quote, 0))
            return (
                available_quote >= required_quote,
                f"–ë–∞–ª–∞–Ω—Å {quote}={available_quote:.4f}, –Ω—É–∂–Ω–æ {required_quote:.4f}"
            )
        elif side == "sell":
            available_base = float(balance.get(base, 0))
            return (
                available_base >= amount,
                f"–ë–∞–ª–∞–Ω—Å {base}={available_base:.4f}, –Ω—É–∂–Ω–æ {amount:.4f}"
            )

        return False, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π side"
    except Exception as e:
        return False, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞: {e}"


# --- –†–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π ---
async def place_market_order_safe(symbol: str, side: str, amount: float):
    symbol = normalize_symbol(symbol)
    if symbol not in _order_locks:
        _order_locks[symbol] = asyncio.Lock()

    async with _order_locks[symbol]:
        ok, msg = _check_min_order(symbol, amount)
        if not ok:
            raise Exception(msg)

        ok, msg = has_enough_balance(symbol, side, amount)
        if not ok:
            raise Exception(msg)

        try:
            order = await asyncio.to_thread(exchange.create_market_order, symbol, side, amount)
            logger.info(f"‚úÖ Market order {side} {amount} {symbol} executed.")
            return order
        except Exception as e:
            logger.error(f"place_market_order error: {e}")
            raise

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è ---
exchange = get_exchange()
