# decorators.py
import ccxt
import logging
import asyncio
from datetime import datetime, timedelta

from utils import get_exchange
from state import remove_job

logger = logging.getLogger(__name__)

async def reconnect_exchange():
    """
    –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∏—Ä–∂–µ.
    """
    logger.info("üîÅ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∏—Ä–∂–µ...")
    await asyncio.sleep(5)
    return await get_exchange()


async def safe_notify(context, chat_id, text):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    try:
        await context.bot.send_message(chat_id, text)
    except Exception as e:
        logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}: {e}")

def resilient_strategy(func):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π:
    - –∑–∞—â–∏—â–∞–µ—Ç –æ—Ç —Å–µ—Ç–µ–≤—ã—Ö –∏ API-–æ—à–∏–±–æ–∫;
    - –¥–µ–ª–∞–µ—Ç –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ reconnect_exchange();
    - –Ω–µ –ø–∞–¥–∞–µ—Ç –¥–∞–∂–µ –ø—Ä–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–æ—Ç–µ—Ä–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞.
    """
    async def wrapper(context, *args, **kwargs):
        job = getattr(context, "job", None)
        chat_id = getattr(job, "chat_id", None)
        retry_count = 0
        max_retries = 5
        retry_delay = 30  # —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏

        while retry_count < max_retries:
            try:
                await func(context, *args, **kwargs)
                if retry_count > 0:
                    logger.info(f"‚úÖ –°—Ç—Ä–∞—Ç–µ–≥–∏—è {func.__name__} –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª–∞—Å—å –ø–æ—Å–ª–µ {retry_count} –ø–æ–ø—ã—Ç–æ–∫.")
                return

            except ccxt.NetworkError as e:
                retry_count += 1
                logger.warning(f"üåê NetworkError ({retry_count}/{max_retries}) –≤ {func.__name__}: {e}")
                await safe_notify(context, chat_id, f"üåê –ü–æ—Ç–µ—Ä—è —Å–≤—è–∑–∏, –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ #{retry_count}...")
                await reconnect_exchange(delay=10)
                await asyncio.sleep(retry_delay)

            except ccxt.ExchangeError as e:
                retry_count += 1
                logger.warning(f"‚ö†Ô∏è ExchangeError ({retry_count}/{max_retries}) –≤ {func.__name__}: {e}")
                await safe_notify(context, chat_id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ API, –ø–æ–ø—ã—Ç–∫–∞ #{retry_count}...")
                await asyncio.sleep(retry_delay)

            except Exception as e:
                logger.exception(f"üí• –û—à–∏–±–∫–∞ –≤ {func.__name__}: {e}")
                if job:
                    job.schedule_removal()
                    if chat_id:
                        remove_job(context.application.user_data.get(chat_id, {}), job.name)
                        await safe_notify(context, chat_id, f"‚ùå –û—à–∏–±–∫–∞ {func.__name__}: {e}")
                break

        # –ï—Å–ª–∏ –ø–æ—Å–ª–µ 5 –ø–æ–ø—ã—Ç–æ–∫ –Ω–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª–æ—Å—å
        if retry_count >= max_retries:
            logger.error(f"‚ùå –°—Ç—Ä–∞—Ç–µ–≥–∏—è {func.__name__} —É–ø–∞–ª–∞ –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫.")
            if chat_id:
                await safe_notify(context, chat_id, f"‚ùå {func.__name__} –Ω–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–≤—è–∑—å. –ü–æ–ø—Ä–æ–±—É–µ—Ç —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ 5 –º–∏–Ω...")
            if job:
                try:
                    new_run_time = datetime.now() + timedelta(minutes=5)
                    job.reschedule(trigger='date', run_date=new_run_time)
                    logger.info(f"‚ôªÔ∏è –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ {func.__name__} –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ {new_run_time}")
                except Exception as e:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É {func.__name__}: {e}")
    return wrapper
