# bot.py
from logging_config import setup_logging
setup_logging()

import logging
import asyncio
from typing import Dict, Any, List, Tuple

from telegram import Update
from telegram.ext import (
    Application, CommandHandler,
    ConversationHandler, ContextTypes, MessageHandler,
    CallbackQueryHandler, filters
)

from decimal import Decimal, InvalidOperation
from settings import TELEGRAM_TOKEN
from menus import get_main_menu, get_strategies_menu, get_back_menu
from state import stop_all_jobs, get_jobs, remove_job
from strategies.percent import start_percent_strategy
from strategies.dca import start_dca_strategy
from strategies.range import start_range_strategy
from utils import get_price as sync_get_price, get_balance as sync_get_balance, place_market_order_safe as sync_place_market_order
from state_manager import load_strategies, save_strategies
from restore_strategies import restore_strategies
from constants import MIN_ORDER_USD, MIN_USD_VALUE, MAX_PRICE_CHECKS, MAJOR_ASSETS



logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–≤
PERCENT_SYMBOL, PERCENT_AMOUNT, PERCENT_STEP, PERCENT_INTERVAL = range(0, 4)
DCA_SYMBOL, DCA_AMOUNT, DCA_INTERVAL = range(4, 7)
RANGE_SYMBOL, RANGE_AMOUNT, RANGE_MIN, RANGE_MAX, RANGE_INTERVAL = range(7, 12)
BUY_SYMBOL, BUY_AMOUNT = range(12, 14)
SELL_SYMBOL, SELL_AMOUNT = range(14, 16)
PRICE_SYMBOL = 16

# ----------------- Start -----------------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç (demo).", reply_markup=get_main_menu())

# ----------------- Helper -----------------
def _user_from(update=None, context=None):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç {'chat_id': <id>} –±–µ–∑–æ–ø–∞—Å–Ω–æ –∏–∑ update/context."""
    try:
        if update is not None and hasattr(update, "effective_chat") and update.effective_chat is not None:
            return {"chat_id": getattr(update.effective_chat, "id", "unknown")}
    except Exception:
        pass
    try:
        if context is not None and hasattr(context, "user_data") and isinstance(context.user_data, dict):
            if "chat_id" in context.user_data:
                return {"chat_id": context.user_data.get("chat_id")}
    except Exception:
        pass
    try:
        if context is not None and hasattr(context, "bot") and hasattr(context.bot, "id"):
            return {"chat_id": getattr(context.bot, "id", "unknown")}
    except Exception:
        pass
    return {"chat_id": "unknown"}
# -----------------






# ----------------- Price (CLI) -----------------
async def check_price_cli(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /price BTC/USDT (CLI)"""
    if not context.args:
        await update.message.reply_text("–£–∫–∞–∂–∏ –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É (–Ω–∞–ø—Ä–∏–º–µ—Ä `/price BTC/USDT`).", parse_mode="Markdown")
        return
    symbol = context.args[0].strip().upper()
    if "/" not in symbol:
        symbol = f"{symbol}/USDT"
    try:
        price = await asyncio.to_thread(sync_get_price, symbol)
        if price is None:
            await update.message.reply_text(f"‚ùå –ü–∞—Ä–∞ {symbol} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.")
        else:
            await update.message.reply_text(f"üíπ –¶–µ–Ω–∞ {symbol}: {price:.2f}")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã: {e}")


# ----------------- Price (–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞) -----------------
async def price_symbol(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä BTC/USDT –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ BTC):", reply_markup=get_back_menu())
    return PRICE_SYMBOL

async def price_run(update: Update, context: ContextTypes.DEFAULT_TYPE):
    raw = update.message.text.strip().upper()
    if not raw:
        await update.message.reply_text("‚ùå –ü—É—Å—Ç–æ–π –≤–≤–æ–¥. –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=get_main_menu())
        return ConversationHandler.END

    # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª –ø—Ä–æ—Å—Ç–æ 'BTC' ‚Äî –¥–æ–ø–∏—Å—ã–≤–∞–µ–º /USDT
    if "/" not in raw:
        symbol = f"{raw}/USDT"
    else:
        symbol = raw

    # –∑–∞—â–∏—Ç–∏–º—Å—è –æ—Ç —Å–ª—É—á–∞–π–Ω—ã—Ö –≤–≤–æ–¥–æ–≤, –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö—Å—è —Å '/'
    if symbol.startswith("/"):
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –ø–∞—Ä–∞.", reply_markup=get_main_menu())
        return ConversationHandler.END

    try:
        price = await asyncio.to_thread(sync_get_price, symbol)
        if price is None:
            await update.message.reply_text(f"‚ùå –ü–∞—Ä–∞ {symbol} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.", reply_markup=get_main_menu())
        else:
            await update.message.reply_text(f"üíπ –¶–µ–Ω–∞ {symbol}: {price:.2f}", reply_markup=get_main_menu())
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã: {e}", reply_markup=get_main_menu())

    return ConversationHandler.END


# ----------------- –°–ø–∏—Å–æ–∫ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫—É—Ä—Å–æ–≤ (USDT) -----------------
async def list_major_prices(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lines: List[str] = []
    for asset in MAJOR_ASSETS:
        if asset == "USDT":  # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –±–µ—Å—Å–º—ã—Å–ª–µ–Ω–Ω—É—é –ø–∞—Ä—É
            continue
        pair = f"{asset}/USDT"
        try:
            price = await asyncio.to_thread(sync_get_price, pair)
            if price is None:
                lines.append(f"{pair}: ‚ùå –û—à–∏–±–∫–∞")
            else:
                lines.append(f"{pair}: {price:.2f}")
        except Exception:
            lines.append(f"{pair}: ‚ùå –û—à–∏–±–∫–∞")
    await update.message.reply_text("üíπ –ö—É—Ä—Å—ã –æ—Å–Ω–æ–≤–Ω—ã—Ö –≤–∞–ª—é—Ç (USDT):\n" + "\n".join(lines), reply_markup=get_main_menu())


# ----------------- –°–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π -----------------
async def list_strategies(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id

    # –ë–µ—Ä–µ–º –∏–∑ –æ–±—â–µ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞, –≥–¥–µ restore_strategies –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    all_active = context.application.bot_data.get("active_strategies", {})

    user_strats = all_active.get(chat_id, [])

    if not user_strats:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π.")
        return

    lines = []
    for s in user_strats:
        lines.append(
            f"üìä {s['symbol']}: —à–∞–≥ {s.get('params', {}).get('step', '?')}% / "
            f"–æ–±—ä—ë–º {s.get('params', {}).get('amount', '?')}"
        )

    await update.message.reply_text("üìã –ê–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:\n" + "\n".join(lines))



# ----------------- –°—Ç–æ–ø –≤—Å–µ—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π -----------------
async def stop_all(update: Update, context: ContextTypes.DEFAULT_TYPE):
    stopped = stop_all_jobs(context.user_data)
    if stopped:
        text = "üõë –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:\n" + "\n".join(stopped)
    else:
        text = "‚ö†Ô∏è –ù–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π."
    await update.message.reply_text(text)


# ----------------- –ü–æ–∫—É–ø–∫–∞ / –ü—Ä–æ–¥–∞–∂–∞ -----------------

# ----------------- –ü–æ–∫—É–ø–∫–∞ -----------------
async def buy_symbol(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É (–Ω–∞–ø—Ä–∏–º–µ—Ä BTC/USDT –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ BTC):", reply_markup=get_back_menu())
    return BUY_SYMBOL

async def buy_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–∞—Ä—ã –∫–∞–∫ –≤–µ—Ä—Ö–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä –±–µ–∑ –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤
    context.user_data["buy_symbol"] = update.message.text.strip().upper()
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ë–ê–ó–û–í–û–ô –≤–∞–ª—é—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä 0.001 –¥–ª—è BTC):", reply_markup=get_back_menu())
    return BUY_AMOUNT

async def buy_run(update: Update, context: ContextTypes.DEFAULT_TYPE):
    from utils import normalize_symbol, place_market_order_safe

    # ---- –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å (–∑–∞—â–∏—Ç–∞ –æ—Ç –¥–≤–æ–π–Ω–æ–≥–æ –∫–ª–∏–∫–∞) ----
    if context.user_data.get("op_lock"):
        await update.message.reply_text("‚è≥ –ü—Ä–µ–¥—ã–¥—É—â–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –µ—â—ë –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥.", reply_markup=get_main_menu())
        return ConversationHandler.END
    context.user_data["op_lock"] = True

    try:
        # –ü–∞—Ä—Å —Å—É–º–º—ã
        try:
            amount = Decimal(update.message.text.strip())
            if amount <= 0:
                raise InvalidOperation()
        except Exception:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.", reply_markup=get_main_menu())
            return ConversationHandler.END

        # –°–∏–º–≤–æ–ª
        raw_symbol = (context.user_data.get("buy_symbol") or "").strip().upper()
        if not raw_symbol:
            await update.message.reply_text("‚ùå –í–∞–ª—é—Ç–Ω–∞—è –ø–∞—Ä–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞.", reply_markup=get_main_menu())
            return ConversationHandler.END

        # BTC -> BTC/USDT
        symbol = normalize_symbol(raw_symbol)
        if "/" not in symbol:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –ø–∞—Ä–∞. –ü—Ä–∏–º–µ—Ä: BTC/USDT", reply_markup=get_main_menu())
            return ConversationHandler.END
        base, quote = symbol.split("/")

        # –¶–µ–Ω–∞ –∏ –±–∞–ª–∞–Ω—Å
        price = await asyncio.to_thread(sync_get_price, symbol)
        if not price:
            await update.message.reply_text(f"‚ùå –ü–∞—Ä–∞ {symbol} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.", reply_markup=get_main_menu())
            return ConversationHandler.END

        balance = await asyncio.to_thread(sync_get_balance)
        quote_balance = Decimal(str(balance.get(quote, 0)))

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞ –∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤
        order_value_usd = Decimal(str(price)) * amount  # –ø–æ–∫—É–ø–∞–µ–º amount –±–∞–∑–æ–≤–æ–π –≤–∞–ª—é—Ç—ã
        if order_value_usd < MIN_ORDER_USD:
            await update.message.reply_text(
                f"‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π –æ—Ä–¥–µ—Ä: ‚âà {order_value_usd:.2f} USDT < {MIN_ORDER_USD} USDT.",
                reply_markup=get_main_menu()
            )
            return ConversationHandler.END

        required_quote = order_value_usd  # –≤ USDT (–∏–ª–∏ –¥—Ä—É–≥–æ–π quote)
        if quote_balance < required_quote:
            await update.message.reply_text(
                f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ {quote}: –±–∞–ª–∞–Ω—Å {quote_balance:.4f}, —Ç—Ä–µ–±—É–µ—Ç—Å—è ‚âà {required_quote:.2f}.",
                reply_markup=get_main_menu()
            )
            return ConversationHandler.END

        # –†–∞–∑–º–µ—â–∞–µ–º –æ—Ä–¥–µ—Ä (amount ‚Äî –≤ –±–∞–∑–æ–≤–æ–π –≤–∞–ª—é—Ç–µ)
        await place_market_order_safe(symbol, "buy", float(amount))
        await update.message.reply_text(f"‚úÖ –ö—É–ø–ª–µ–Ω–æ {amount.normalize()} {base} –ø–æ —Ä—ã–Ω–∫—É {symbol}.", reply_markup=get_main_menu())
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ: {e}", reply_markup=get_main_menu())
    finally:
        context.user_data["op_lock"] = False

    return ConversationHandler.END



# ----------------- –ü—Ä–æ–¥–∞–∂–∞ -----------------
async def sell_symbol(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É (–Ω–∞–ø—Ä–∏–º–µ—Ä BTC/USDT –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ BTC):", reply_markup=get_back_menu())
    return SELL_SYMBOL

async def sell_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["sell_symbol"] = update.message.text.strip().upper()
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ë–ê–ó–û–í–û–ô –≤–∞–ª—é—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä 0.001 BTC):", reply_markup=get_back_menu())
    return SELL_AMOUNT

async def sell_run(update: Update, context: ContextTypes.DEFAULT_TYPE):
    from utils import normalize_symbol, place_market_order_safe

    # ---- –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å ----
    if context.user_data.get("op_lock"):
        await update.message.reply_text("‚è≥ –ü—Ä–µ–¥—ã–¥—É—â–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –µ—â—ë –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥.", reply_markup=get_main_menu())
        return ConversationHandler.END
    context.user_data["op_lock"] = True

    try:
        # –ü–∞—Ä—Å —Å—É–º–º—ã
        try:
            amount = Decimal(update.message.text.strip())
            if amount <= 0:
                raise InvalidOperation()
        except Exception:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.", reply_markup=get_main_menu())
            return ConversationHandler.END

        # –°–∏–º–≤–æ–ª
        raw_symbol = (context.user_data.get("sell_symbol") or "").strip().upper()
        if not raw_symbol:
            await update.message.reply_text("‚ùå –í–∞–ª—é—Ç–Ω–∞—è –ø–∞—Ä–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞.", reply_markup=get_main_menu())
            return ConversationHandler.END

        symbol = normalize_symbol(raw_symbol)
        if "/" not in symbol:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –ø–∞—Ä–∞. –ü—Ä–∏–º–µ—Ä: BTC/USDT", reply_markup=get_main_menu())
            return ConversationHandler.END
        base, quote = symbol.split("/")

        # –¶–µ–Ω–∞ –∏ –±–∞–ª–∞–Ω—Å
        price = await asyncio.to_thread(sync_get_price, symbol)
        if not price:
            await update.message.reply_text(f"‚ùå –ü–∞—Ä–∞ {symbol} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.", reply_markup=get_main_menu())
            return ConversationHandler.END

        balance = await asyncio.to_thread(sync_get_balance)
        base_balance = Decimal(str(balance.get(base, 0)))

        if base_balance < amount:
            await update.message.reply_text(
                f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ {base}: –±–∞–ª–∞–Ω—Å {base_balance.normalize()}, —Ç—Ä–µ–±—É–µ—Ç—Å—è {amount.normalize()}.",
                reply_markup=get_main_menu()
            )
            return ConversationHandler.END

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞ (–≤ USD-—ç–∫–≤.)
        order_value_usd = Decimal(str(price)) * amount
        if order_value_usd < MIN_ORDER_USD:
            await update.message.reply_text(
                f"‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π –æ—Ä–¥–µ—Ä: ‚âà {order_value_usd:.2f} USDT < {MIN_ORDER_USD} USDT.",
                reply_markup=get_main_menu()
            )
            return ConversationHandler.END

        # –†–∞–∑–º–µ—â–∞–µ–º –æ—Ä–¥–µ—Ä (amount ‚Äî –≤ –±–∞–∑–æ–≤–æ–π –≤–∞–ª—é—Ç–µ)
        await place_market_order_safe(symbol, "sell", float(amount))
        await update.message.reply_text(f"‚úÖ –ü—Ä–æ–¥–∞–Ω–æ {amount.normalize()} {base} –ø–æ —Ä—ã–Ω–∫—É {symbol}.", reply_markup=get_main_menu())
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ: {e}", reply_markup=get_main_menu())
    finally:
        context.user_data["op_lock"] = False

    return ConversationHandler.END


# ----------------- Percent / DCA / Range (Conversation flows) -----------------

# ----------------- Percent -----------------
async def percent_symbol(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É (–Ω–∞–ø—Ä–∏–º–µ—Ä BTC/USDT):", reply_markup=get_back_menu())
    return PERCENT_SYMBOL

async def percent_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["percent_symbol"] = update.message.text.strip().upper()
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É (–Ω–∞–ø—Ä–∏–º–µ—Ä 0.001):", reply_markup=get_back_menu())
    return PERCENT_AMOUNT

async def percent_step(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        context.user_data["percent_amount"] = float(update.message.text.strip())
    except Exception:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=get_main_menu())
        return ConversationHandler.END
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç —à–∞–≥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä 0.5):", reply_markup=get_back_menu())
    return PERCENT_STEP

async def percent_interval(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        context.user_data["percent_step"] = float(update.message.text.strip())
    except Exception:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —à–∞–≥–∞.", reply_markup=get_main_menu())
        return ConversationHandler.END
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ –º–∏–Ω—É—Ç–∞—Ö:", reply_markup=get_back_menu())
    return PERCENT_INTERVAL

async def percent_run(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        # –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –¥—Ä–æ–±–Ω—ã—Ö –∏ –∑–∞–ø—è—Ç—ã—Ö
        interval = float(update.message.text.strip().replace(",", "."))
        if interval <= 0:
            raise ValueError
    except Exception:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä 1 –∏–ª–∏ 0.5).",
            reply_markup=get_main_menu()
        )
        return ConversationHandler.END

    symbol = context.user_data.get("percent_symbol")
    amount = context.user_data.get("percent_amount")
    step = context.user_data.get("percent_step")

    if not symbol or amount is None or step is None:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.", reply_markup=get_main_menu())
        return ConversationHandler.END

    started = await start_percent_strategy(update, context, symbol, amount, step, interval)
    if started:
        await update.message.reply_text("‚úÖ Percent-—Å—Ç—Ä–∞—Ç–µ–≥–∏—è –∑–∞–ø—É—â–µ–Ω–∞.", reply_markup=get_main_menu())
    return ConversationHandler.END


# ----------------- DCA -----------------
# ----------------- DCA -----------------
async def dca_symbol(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É (–Ω–∞–ø—Ä–∏–º–µ—Ä ETH/USDT):", reply_markup=get_back_menu())
    return DCA_SYMBOL


async def dca_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["dca_symbol"] = update.message.text.strip().upper()
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É (–Ω–∞–ø—Ä–∏–º–µ—Ä 0.002):", reply_markup=get_back_menu())
    return DCA_AMOUNT


async def dca_interval(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        context.user_data["dca_amount"] = float(update.message.text.strip())
    except Exception:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=get_main_menu())
        return ConversationHandler.END
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ –º–∏–Ω—É—Ç–∞—Ö:", reply_markup=get_back_menu())
    return DCA_INTERVAL


async def dca_run(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        interval = float(update.message.text.strip().replace(",", "."))
        if interval <= 0:
            raise ValueError
    except Exception:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä 1 –∏–ª–∏ 0.5).",
            reply_markup=get_main_menu()
        )
        return ConversationHandler.END

    symbol = context.user_data.get("dca_symbol")
    amount = context.user_data.get("dca_amount")

    if not symbol or amount is None:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.", reply_markup=get_main_menu())
        return ConversationHandler.END

    started = await start_dca_strategy(update, context, symbol, amount, interval)
    if started:
        await update.message.reply_text("‚úÖ DCA-—Å—Ç—Ä–∞—Ç–µ–≥–∏—è –∑–∞–ø—É—â–µ–Ω–∞.", reply_markup=get_main_menu())
    return ConversationHandler.END




# ----------------- Range -----------------
async def range_symbol(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É (–Ω–∞–ø—Ä–∏–º–µ—Ä BNB/USDT):", reply_markup=get_back_menu())
    return RANGE_SYMBOL

async def range_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["range_symbol"] = update.message.text.strip().upper()
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É (–Ω–∞–ø—Ä–∏–º–µ—Ä 0.001):", reply_markup=get_back_menu())
    return RANGE_AMOUNT

async def range_min(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        context.user_data["range_amount"] = float(update.message.text.strip())
    except Exception:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=get_main_menu())
        return ConversationHandler.END
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∂–Ω—é—é –≥—Ä–∞–Ω–∏—Ü—É –¥–∏–∞–ø–∞–∑–æ–Ω–∞:", reply_markup=get_back_menu())
    return RANGE_MIN

async def range_max(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        context.user_data["range_min"] = float(update.message.text.strip())
    except Exception:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –º–∏–Ω–∏–º—É–º–∞. –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=get_main_menu())
        return ConversationHandler.END
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–µ—Ä—Ö–Ω—é—é –≥—Ä–∞–Ω–∏—Ü—É –¥–∏–∞–ø–∞–∑–æ–Ω–∞:", reply_markup=get_back_menu())
    return RANGE_MAX

async def range_interval(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        context.user_data["range_max"] = float(update.message.text.strip())
    except Exception:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –º–∞–∫—Å–∏–º—É–º–∞.", reply_markup=get_main_menu())
        return ConversationHandler.END
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ –º–∏–Ω—É—Ç–∞—Ö:", reply_markup=get_back_menu())
    return RANGE_INTERVAL

async def range_run(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        interval = float(update.message.text.strip().replace(",", "."))
        if interval <= 0:
            raise ValueError
    except Exception:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä 1 –∏–ª–∏ 0.5).",
            reply_markup=get_main_menu()
        )
        return ConversationHandler.END

    symbol = context.user_data.get("range_symbol")
    amount = context.user_data.get("range_amount")
    min_val = context.user_data.get("range_min")
    max_val = context.user_data.get("range_max")

    if not symbol or amount is None or min_val is None or max_val is None:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.", reply_markup=get_main_menu())
        return ConversationHandler.END

    started = await start_range_strategy(update, context, symbol, amount, min_val, max_val, interval)
    if started:
        await update.message.reply_text("‚úÖ Range-—Å—Ç—Ä–∞—Ç–µ–≥–∏—è –∑–∞–ø—É—â–µ–Ω–∞.", reply_markup=get_main_menu())
    return ConversationHandler.END


# ----------------- STOP callback -----------------
async def stop_strategy_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if not query:
        return
    await query.answer()
    job_key = query.data.replace("STOP:", "")

    res = remove_job(context.user_data, job_key)
    if res:
        # remove_job –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç (key, job) –ø–æ —Ç–≤–æ–µ–º—É –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–º—É state.py
        key, _ = res
        await query.edit_message_text(f"üõë –°—Ç—Ä–∞—Ç–µ–≥–∏—è {key} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
    else:
        await query.edit_message_text("‚ö†Ô∏è –°—Ç—Ä–∞—Ç–µ–≥–∏—è —É–∂–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞.")


# ----------------- –ë–∞–ª–∞–Ω—Å (—Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –∏ –ø–æ—Ä–æ–≥–∞–º–∏) -----------------
async def show_balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        raw_bal: Dict[str, Any] = await asyncio.to_thread(sync_get_balance)
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}")
        return

    # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–Ω—É–ª–µ–≤—ã–µ
    items = [(k, float(v)) for k, v in raw_bal.items() if float(v) > 0]
    if not items:
        await update.message.reply_text("‚ö†Ô∏è –ë–∞–ª–∞–Ω—Å –ø—É—Å—Ç.")
        return

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É (–ø—Ä–∏–º–µ—Ä–Ω–æ) ‚Äî –∏ –±—É–¥–µ–º –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Ü–µ–Ω—É –¥–ª—è —Ç–æ–ø-N
    items.sort(key=lambda x: x[1], reverse=True)

    display: List[str] = []
    checks = 0

    # –°–Ω–∞—á–∞–ª–∞ –æ–±–µ—Å–ø–µ—á–∏–º –ø–æ–∫–∞–∑ –º–∞–∂–æ—Ä–Ω—ã—Ö –∞–∫—Ç–∏–≤–æ–≤ (BTC/ETH/USDT –∏ —Ç.–¥.)
    prefer_set = set(MAJOR_ASSETS)
    preferred_items = [it for it in items if it[0] in prefer_set]
    others = [it for it in items if it[0] not in prefer_set]

    # –û–±—Ä–∞–±–æ—Ç–∞–µ–º preferred (–ø–æ–ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏—Ö USD-—Å—Ç–æ–∏–º–æ—Å—Ç—å)
    for asset, amt in preferred_items:
        if asset == "USDT":
            display.append(f"{asset}: {amt:.6g} (‚âà {amt:.2f} USDT)")
            continue
        pair = f"{asset}/USDT"
        try:
            price = await asyncio.to_thread(sync_get_price, pair)
            usd = price * amt
            display.append(f"{asset}: {amt} (‚âà {usd:.2f} USDT)")
        except Exception:
            display.append(f"{asset}: {amt}")

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã—Ö, –¥–µ–ª–∞—è –Ω–µ –±–æ–ª–µ–µ MAX_PRICE_CHECKS –∑–∞–ø—Ä–æ—Å–æ–≤ —Ü–µ–Ω
    for asset, amt in others:
        if checks >= MAX_PRICE_CHECKS:
            break
        # –ø—Ä–æ—Å—Ç–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É (–º–∏–Ω–∏–º—É–º 1 unit) ‚Äî —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –º–µ–ª–∫–∏–µ —Ñ–∞–Ω—Ç—ã
        if amt < 1.0:
            # –Ω–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–±–æ–ª—å—à–∞—è –ø–æ–∑–∏—Ü–∏—è BTC/ETH - –Ω–∞–º –±—ã —Ö–æ—Ç–µ–ª–æ—Å—å –ø–æ–∫–∞–∑–∞—Ç—å, –ø–æ—ç—Ç–æ–º—É:
            if asset in ("BTC", "ETH"):
                pass
            else:
                continue
        pair = f"{asset}/USDT"
        try:
            price = await asyncio.to_thread(sync_get_price, pair)
            usd = price * amt
            checks += 1
            if usd >= MIN_USD_VALUE:
                display.append(f"{asset}: {amt} (‚âà {usd:.2f} USDT)")
        except Exception:
            checks += 1
            # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ –Ω–µ —É–¥–∞—ë—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É
            continue

    if not display:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (—Ñ–∏–ª—å—Ç—Ä).")
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∞–Ω–∫–∞–º–∏, —á—Ç–æ–±—ã –Ω–µ –ø–æ–ª—É—á–∏—Ç—å 'Message is too long'
    CHUNK = 3500
    chunk = ""
    for line in display:
        if len(chunk) + len(line) + 1 > CHUNK:
            await update.message.reply_text("üí∞ –ë–∞–ª–∞–Ω—Å:\n" + chunk.strip())
            chunk = ""
        chunk += line + "\n"
    if chunk:
        await update.message.reply_text("üí∞ –ë–∞–ª–∞–Ω—Å:\n" + chunk.strip())


# ----------------- –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ (–∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é) -----------------
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text

    if text == "‚ö° –°—Ç—Ä–∞—Ç–µ–≥–∏–∏":
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é:", reply_markup=get_strategies_menu())

    elif text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu())

    elif text == "üìã –ê–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏":
        return await list_strategies(update, context)

    elif text == "Percent":
        return await percent_symbol(update, context)

    elif text == "DCA":
        return await dca_symbol(update, context)

    elif text == "Range":
        return await range_symbol(update, context)

    elif text == "üõë –°—Ç–æ–ø –≤—Å–µ":
        return await stop_all(update, context)

    elif text == "üìä –ë–∞–ª–∞–Ω—Å":
        return await show_balance(update, context)

    elif text == "üíµ –ö—É–ø–∏—Ç—å":
        return await buy_symbol(update, context)

    elif text == "üí∞ –ü—Ä–æ–¥–∞—Ç—å":
        return await sell_symbol(update, context)

    elif text == "üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ü–µ–Ω—É":
        return await price_symbol(update, context)

    elif text == "üìã –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –≤–∞–ª—é—Ç—ã":
        return await list_major_prices(update, context)

    # –ø—Ä–æ—á–∏–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è ConversationHandler'–∞–º–∏


# ----------------- Main -----------------
def main():
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞...")

    app = Application.builder().token(TELEGRAM_TOKEN).build()

    # –ö–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("list_strategies", list_strategies))
    app.add_handler(CommandHandler("stop_grid", stop_all))
    app.add_handler(CommandHandler("price", check_price_cli))
    app.add_handler(CallbackQueryHandler(stop_strategy_callback, pattern="^STOP:"))

    # ConversationHandlers
    conv_price = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ü–µ–Ω—É$"), price_symbol)],
        states={PRICE_SYMBOL: [MessageHandler(filters.TEXT & ~filters.COMMAND, price_run)]},
        fallbacks=[],
        name="conv_price",
        persistent=False,
    )
    app.add_handler(conv_price)

    conv_percent = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^Percent$"), percent_symbol)],
        states={
            PERCENT_SYMBOL: [MessageHandler(filters.TEXT & ~filters.COMMAND, percent_amount)],
            PERCENT_AMOUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, percent_step)],
            PERCENT_STEP: [MessageHandler(filters.TEXT & ~filters.COMMAND, percent_interval)],
            PERCENT_INTERVAL: [MessageHandler(filters.TEXT & ~filters.COMMAND, percent_run)],
        },
        fallbacks=[],
        name="conv_percent",
        persistent=False,
    )
    app.add_handler(conv_percent)

    conv_dca = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^DCA$"), dca_symbol)],
        states={
            DCA_SYMBOL: [MessageHandler(filters.TEXT & ~filters.COMMAND, dca_amount)],
            DCA_AMOUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, dca_interval)],
            DCA_INTERVAL: [MessageHandler(filters.TEXT & ~filters.COMMAND, dca_run)],
        },
        fallbacks=[],
        name="conv_dca",
        persistent=False,
    )
    app.add_handler(conv_dca)

    conv_range = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^Range$"), range_symbol)],
        states={
            RANGE_SYMBOL: [MessageHandler(filters.TEXT & ~filters.COMMAND, range_amount)],
            RANGE_AMOUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, range_min)],
            RANGE_MIN: [MessageHandler(filters.TEXT & ~filters.COMMAND, range_max)],
            RANGE_MAX: [MessageHandler(filters.TEXT & ~filters.COMMAND, range_interval)],
            RANGE_INTERVAL: [MessageHandler(filters.TEXT & ~filters.COMMAND, range_run)],
        },
        fallbacks=[],
        name="conv_range",
        persistent=False,
    )
    app.add_handler(conv_range)

    conv_buy = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^üíµ –ö—É–ø–∏—Ç—å$"), buy_symbol)],
        states={
            BUY_SYMBOL: [MessageHandler(filters.TEXT & ~filters.COMMAND, buy_amount)],
            BUY_AMOUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, buy_run)],
        },
        fallbacks=[],
        name="conv_buy",
        persistent=False,
    )
    app.add_handler(conv_buy)

    conv_sell = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^üí∞ –ü—Ä–æ–¥–∞—Ç—å$"), sell_symbol)],
        states={
            SELL_SYMBOL: [MessageHandler(filters.TEXT & ~filters.COMMAND, sell_amount)],
            SELL_AMOUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, sell_run)],
        },
        fallbacks=[],
        name="conv_sell",
        persistent=False,
    )
    app.add_handler(conv_sell)

    # –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    logger.info("Bot started")

    # --- –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ ---
    # --- –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ ---
    async def on_startup(app):
        logger.info("üîÅ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ...")
        from restore_strategies import restore_strategies
        from datetime import datetime

        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
        await restore_strategies(app)
        logger.info("‚úÖ –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")

        bot = app.bot
        restored = app.bot_data.get("active_strategies", {})

        # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
        if not restored:
            logger.info("‚ö†Ô∏è –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º –≤—Ä–µ–º—è
        time_now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

        # –†–∞—Å—Å—ã–ª–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        for chat_id, strategies in restored.items():
            if not strategies:
                continue

            msg = (
                    f"‚úÖ –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã\n"
                    f"üïí –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫: {time_now}\n\n"
                    f"üìã –ê–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:\n"
                    + "\n".join(f"‚Ä¢ {s['type'].upper()} ‚Äî {s['symbol']}" for s in strategies)
            )

            try:
                await bot.send_message(chat_id=chat_id, text=msg)
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}: {e}")

    # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Ö—É–∫
    app.post_init = on_startup

    # üöÄ –ó–∞–ø—É—Å–∫ polling
    logger.info("‚úÖ Telegram-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞—é –∫–æ–º–∞–Ω–¥—ã...")
    app.run_polling()  # —Ç–µ–ø–µ—Ä—å –±–µ–∑ close_loop=False


if __name__ == "__main__":
    main()
